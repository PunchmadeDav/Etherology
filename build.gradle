plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
    id 'maven-publish'
    id "io.freefair.lombok" version "8.6"
}

version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
                includeGroupByRegex("software\\.bernie.*")
                includeGroup("com.eliotlash.mclib")
        }
    }
    maven { url = 'https://maven.wispforest.io' }
    maven { url = 'https://maven.ladysnake.org/releases' }
    maven { url = 'https://jitpack.io' }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.terraformersmc.com/"}
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = "https://maven.bawnorton.com/releases/" }
    maven { url = "https://maven.blamejared.com/" }
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

    modImplementation("io.wispforest:owo-lib:${project.owo_version}")
    include "io.wispforest:owo-sentinel:${project.owo_version}"

    modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
    modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")
    modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-chunk:${project.cca_version}")

    modImplementation("software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${gecko_version}")
    implementation("com.eliotlash.mclib:mclib:20")
    modImplementation("dev.emi:trinkets:${project.trinkets_version}")
    modImplementation("com.terraformersmc:biolith:${project.biolith_version}")
    modCompileOnly modRuntimeOnly ("com.terraformersmc:modmenu:${project.mod_menu}"), { exclude(group: "net.fabricmc.fabric-api") }
    modImplementation("com.github.CrimsonDawn45:Fabric-Shield-Lib:v${project.fabric_shield_lib_version}")
    modImplementation("maven.modrinth:midnightlib:${project.midnightlib_version}")

    modCompileOnlyApi "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}"
    modCompileOnly "dev.architectury:architectury-fabric:${project.architectury_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${project.rei_version}"
    modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"

    // REI and EMI (uncomment only 1)
//    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    modLocalRuntime "dev.emi:emi-fabric:${emi_version}"

    include(implementation(annotationProcessor("com.bawnorton.mixinsquared:mixinsquared-fabric:${project.mixin_sqr}")))
    include modImplementation("com.github.Chocohead:Fabric-ASM:${project.fabric_asm}") { exclude (group: "net.fabricmc.fabric-api") }
}

processResources {
    inputs.property "version", project.version;
    inputs.property "short_version", short_version

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
               "short_version": short_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
    repositories {
    }
}

loom {
    runs {
        //
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        //
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${project.modid}"

            runDir "build/datagen"
        }
    }

    accessWidenerPath = file("src/main/resources/etherology.accesswidener")

    splitEnvironmentSourceSets()

    mods {
        etherology {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

// Adds the generated files into the jar you distribute to players.
sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}
